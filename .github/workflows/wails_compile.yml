name: Compile and Release Wails Application

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.21"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgtk-3-dev libwebkit2gtk-4.0-dev upx nsis jq

      - name: Download Wails Source Code
        run: |
          curl -L https://github.com/wailsapp/wails/archive/refs/tags/v2.8.2.tar.gz -o wails.tar.gz
          tar -xzf wails.tar.gz
          mv wails-2.8.2 wails

      - name: Install Wails Dependencies
        run: cd wails/v2 && go get -v -t

      - name: Build Wails Binary
        run: |
          cd wails/v2/cmd/wails
          go build -o wails
          chmod +x wails

      - name: Build Wails Application
        run: ./wails/v2/cmd/wails/wails build -webview2 embed -platform "windows/amd64" -nsis -upx -debug

      - name: Get release upload URL
        id: get_upload_url
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'v1'
            });
            return release.upload_url;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload or Replace Release Asset
        run: |
          # Get the asset name from the previous step
          asset_name="cv-amd64-installer.exe"
          # Correctly URL-encode the asset name using UTF-8
          encoded_asset_name=$(echo -n "$asset_name" | jq -s -R -c -r @uri)
          # Define the asset path
          asset_path="./build/bin/$asset_name"
          # Define the upload URL
          upload_url="${{ steps.get_upload_url.outputs.result }}"
          # Define the asset content type
          asset_content_type="application/octet-stream"

          # Check if the asset exists
          if [ -f "$asset_path" ]; then
            # Asset exists, upload or replace it
            echo "Asset $asset_name exists. Uploading or replacing..."
            # Use curl to upload the asset with the --replace flag
            curl -X POST \
             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             -F "asset[name]=$encoded_asset_name" \
             -F "asset[content]=@$asset_path" \
             -F "asset[content_type]=$asset_content_type" \
             "https://api.github.com/repos/mujehoxe/cv/releases/v1/assets"
          else
            echo "Asset $asset_name does not exist. Skipping upload."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
